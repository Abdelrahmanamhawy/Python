#This code solves the famous game Sudoku by implementing backtracking 
class Solution:
    
    #First find the next empty location 
    #And exit the function after it with return statment to exit immeditatly from the loop
    
   def find_empty_location(arr,l): 
    for row in range(9): 
        for col in range(9): 
            if(arr[row][col]==0): 
                l[0]=row 
                l[1]=col 
                return True
    return False
  
    #Function to check if the number is used in the given row,and another one for the columns . 
    #I tried doing them both in one function but it didn't work correctly
    
    def used_in_row(arr,row,num): 
      for i in range(9): 
          if(arr[row][i] == num): 
              return True
    return False
  

    def used_in_col(arr,col,num): 
      for i in range(9): 
        if(arr[i][col] == num): 
            return True
    return False
    
    #This one is to check if the number is used in the 3x3 grid or not . 
    def used_in_box(arr,row,col,num): 
      for i in range(3): 
        for j in range(3): 
            if(arr[i+row][j+col] == num): 
                return True
    return False
    
    def check_location_is_safe(arr,row,col,num): 
      
    
     return not used_in_row(arr,row,num) and not used_in_col(arr,col,num) and not used_in_box(arr,row - row%3,col - col%3,num)

    def solveSudoku(self, board: List[List[int]]):
      
        l=[0,0] 
      
      # If there is no unassigned location, we are done     
        if(not find_empty_location(board,l)): 
            return True
      
    # Assigning list values to row and col that we got from the above Function  
        row=l[0] 
        col=l[1] 
      
    # consider digits 1 to 9 
        for num in range(1,10): 
          
        # if looks promising 
          if(check_location_is_safe(board,row,col,num)): 
              
            # make tentative assignment 
            board[row][col]=num 
  
            #Here where magic happens, backtracking means we check the current sub-solution if would generate a solution to us or not
            #Backtracking also has the format of : Do,Recursive,Undo 
            #We first assign the value num ,and check if this value will guarentee a solution to us or not by recursisivly calling the function
            #Next call it will check for next empty position and fill it ,if anything failed in this sub-solution it will be neglected all of it
            
            if(self.solveSudoku(board)): 
                return True
  
            # failure, unmake & try again 
            board[row][col] = 0
              
            # this triggers backtracking         
        return False 
    
